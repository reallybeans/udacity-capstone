# gear: Change the name of the org 
org: beanreally
app: serverless-gear-app-1
service: serverless-gear-app-1
frameworkVersion: 3.23.0

plugins:
  - serverless-webpack
  - serverless-iam-roles-per-function
  - serverless-plugin-tracing
  - serverless-reqvalidator-plugin
  - serverless-aws-documentation

provider:
  name: aws
  runtime: nodejs14.x
  # lambdaHashingVersion: '20201221'

  stage: ${opt:stage, 'dev'}
  region: ${opt:region, 'us-east-1'}

  tracing:
    lambda: true
    apiGateway: true

  # Use these variables in the functions and resouorces section below. For example, 
  # ${self:provider.environment.ATTACHMENT_S3_BUCKET}
  environment:
    gearS_TABLE: serverless-c4-gear-app-1-${self:provider.stage}
    gearS_CREATED_AT_INDEX: CreatedAtIndex
    ATTACHMENT_S3_BUCKET: serverless-c4-gear-app-1-images-${self:provider.stage}
    SIGNED_URL_EXPIRATION: 300
    PROJECT_NAME: serverless-gear-app-1
    INDEX_NAME: ${self:provider.environment.gearS_CREATED_AT_INDEX}

  logs:
    # Enable API Gateway logs
    restApi: true

  iam:
    role:
      statements:
        - Effect: Allow
          Action:
            - xray:PutTelemetryRecords
            - xray:PutTraceSegments
          Resource: "*"

custom:
  documentation:
    api:
      info:
        version: v1.0.0
        title: Gears App
        description: Serverless App for gears monitoring
    models:
      - name: CreateGearRequest
        contentType: application/json
        schema: ${file(models/create-gear-model.json)}
      - name: UpdateGearRequest
        contentType: application/json
        schema: ${file(models/update-gear-model.json)}

functions:
  hello:
    handler: handler.hello
    events:
      - httpApi:
          path: /
          method: get
  
  Auth:
    handler: src/lambda/auth/auth0Authorizer.handler

  # gear: Configure this function - 
  # Provide iamRoleStatements property for performing Actions on DynamoDB
  
  GetGears:
    handler: src/lambda/http/getGears.handler
    events:
      - http:
          method: get
          path: gears
          cors: true
          authorizer: Auth
    iamRoleStatmentsName: ${self:provider.environment.PROJECT_NAME}-get-gear-role-${self:provider.stage}
    iamRoleStatements:
      - Effect: Allow
        Action:
          - dynamodb:Query
        Resource: arn:aws:dynamodb:${self:provider.region}:*:table/${self:provider.environment.gearS_TABLE}
      - Effect: Allow
        Action:
          - dynamodb:Query
        Resource: arn:aws:dynamodb:${self:provider.region}:*:table/${self:provider.environment.gearS_TABLE}/index/${self:provider.environment.gearS_CREATED_AT_INDEX}
      - Effect: Allow
        Action:
          - xray:PutTraceSegments
        Resource:
          - '*'

  # gear: Configure this function - 
  # Provide iamRoleStatements property. Decide the Actions and AWS Resource. 
  # To refer to an AWS resource defined in the "Resources" section, you can use "Resource: !GetAtt <resource-name>.Arn"
  # To validate incoming HTTP requests, we have provided the request schemas in function definition below. 
  
  CreateGear:
    handler: src/lambda/http/createGear.handler
    events:
      - http:
          method: post
          path: gears
          cors: true
          authorizer: Auth
  #         request:
  #           schemas:
  #             application/json: ${file(models/create-gear-model.json)}
          reqValidatorName: RequestBodyValidator
          documentation:
            summary: Create new to do task
            description: Create a new to do task
            requestModels: 
              'application/json': CreateGearRequest
    iamRoleStatmentsName: ${self:provider.environment.PROJECT_NAME}-create-gear-role-${self:provider.stage}
    iamRoleStatements:
      - Effect: Allow
        Action:
          - dynamodb:PutItem
        Resource: arn:aws:dynamodb:${self:provider.region}:*:table/${self:provider.environment.gearS_TABLE}
      - Effect: Allow
        Action:
          - xray:PutTraceSegments
        Resource:
          - '*'

  # gear: Configure this function
  # Provide property for setting up CORS, Authorizer, iamRoleStatements, and request schemas
  
  UpdateGear:
    handler: src/lambda/http/updateGear.handler
    events:
      - http:
          method: patch
          path: gears/{gearId}
          cors: true
          authorizer: Auth
          reqValidatorName: RequestBodyValidator
          documentation:
            summary: Update new to do task
            description: Update a new to do task
            requestModels: 
              'application/json': UpdateGearRequest
    iamRoleStatmentsName: ${self:provider.environment.PROJECT_NAME}-update-gear-role-${self:provider.stage}
    iamRoleStatements:
      - Effect: Allow
        Action:
          - dynamodb:UpdateItem
        Resource: arn:aws:dynamodb:${self:provider.region}:*:table/${self:provider.environment.gearS_TABLE}
      - Effect: Allow
        Action:
          - xray:PutTraceSegments
        Resource:
          - '*'
  # gear: Configure this function
  # Provide property for setting up CORS, Authorizer, iamRoleStatements
  
  DeleteGear:
    handler: src/lambda/http/deleteGear.handler
    events:
      - http:
          method: delete
          path: gears/{gearId}
          cors: true
          authorizer: Auth
    iamRoleStatmentsName: ${self:provider.environment.PROJECT_NAME}-delete-gear-role-${self:provider.stage}
    iamRoleStatements:
      - Effect: Allow
        Action:
          - dynamodb:DeleteItem
        Resource: arn:aws:dynamodb:${self:provider.region}:*:table/${self:provider.environment.gearS_TABLE}
      - Effect: Allow
        Action:
          - xray:PutTraceSegments
        Resource:
          - '*'

  # gear: Configure this function
  # Provide property for setting up CORS, Authorizer, iamRoleStatements
  
  GenerateUploadUrl:
    handler: src/lambda/http/generateUploadUrl.handler
    events:
      - http:
          method: post
          path: gears/{gearId}/attachment
          cors: true
          authorizer: Auth
    iamRoleStatmentsName: ${self:provider.environment.PROJECT_NAME}-generate-s3-upload-url-role-${self:provider.stage}
    iamRoleStatements:
      - Effect: Allow
        Action:
          - s3:*
        Resource: arn:aws:s3:::${self:provider.environment.ATTACHMENT_S3_BUCKET}/*
      - Effect: Allow
        Action:
          - dynamodb:Query
          - dynamodb:PutItem
        Resource: arn:aws:dynamodb:${self:provider.region}:*:table/${self:provider.environment.gearS_TABLE}
      - Effect: Allow
        Action: 
          - xray:PutTraceSegments
        Resource:
          - '*'

resources:
  Resources:
    # Add necessary AWS resources. You will need at least the following AWS resources
    # gear: Fill the properties
    # Feel free to change the names as you like. 
    
    GatewayResponseDefault4XX:
      Type: AWS::ApiGateway::GatewayResponse
      Properties:
        ResponseParameters:
          gatewayresponse.header.Access-Control-Allow-Origin: "'*'"
          gatewayresponse.header.Access-Control-Allow-Header: "'Content-Type,X-Amz-Date,Authorization,X-Api-Key'"
          gatewayresponse.header.Access-Control-Allow-Methods: "'GET,OPTIONS,POST'"
        ResponseType: DEFAULT_4XX
        RestApiId:
          Ref: 'ApiGatewayRestApi'
        
    GatewayResponseDefault5XX:
      Type: AWS::ApiGateway::GatewayResponse
      Properties:
        ResponseParameters:
          gatewayresponse.header.Access-Control-Allow-Origin: "'*'"
          gatewayresponse.header.Access-Control-Allow-Header: "'Content-Type,X-Amz-Date,Authorization,X-Api-Key'"
          gatewayresponse.header.Access-Control-Allow-Methods: "'GET,OPTIONS,POST,DELETE,PATCH,PUT'"
        ResponseType: DEFAULT_5XX
        RestApiId:
          Ref: 'ApiGatewayRestApi'
    
    RequestBodyValidator:
      Type: AWS::ApiGateway::RequestValidator
      Properties:
        Name: 'request-body-validator'
        RestApiId:
          Ref: 'ApiGatewayRestApi'
        ValidateRequestBody: true
        ValidateRequestParameters: true
    # gear: Create a DynamoDB table with local secondary index and a composite key

    GearsTable:
      Type: AWS::DynamoDB::Table
      Properties:
        AttributeDefinitions:
          - AttributeName: userId
            AttributeType: S
          - AttributeName: gearId
            AttributeType: S
          - AttributeName: createdAt
            AttributeType: S
        KeySchema:
          - AttributeName: userId
            KeyType: HASH
          - AttributeName: gearId
            KeyType: RANGE
        BillingMode: PAY_PER_REQUEST
        TableName: ${self:provider.environment.gearS_TABLE}
        LocalSecondaryIndexes:
          - IndexName: ${self:provider.environment.gearS_CREATED_AT_INDEX}
            KeySchema:
              - AttributeName: userId
                KeyType: HASH
              - AttributeName: createdAt
                KeyType: RANGE
            Projection:
              ProjectionType: ALL # What attributes will be copied to an index

    # gear: Complete the bucket properties below. 
    # Do not forget to add the CorsConfiguration propoerty
    
    AttachmentsBucket:
      Type: AWS::S3::Bucket
      Properties:
        BucketName: ${self:provider.environment.ATTACHMENT_S3_BUCKET}
        PublicAccessBlockConfiguration:
          BlockPublicAcls       : false
          BlockPublicPolicy     : false
          IgnorePublicAcls      : false
          RestrictPublicBuckets : false
        CorsConfiguration:
          CorsRules:
            - AllowedMethods:
                - GET
                - PUT
                - POST
                - DELETE
                - HEAD
              AllowedOrigins:
                - "*"
              AllowedHeaders:
                - "*"
              MaxAge: 300

    # gear: Complete the policy below and attach it to the bucket defined above
    # For cross referencing the name of the bucket, use "!Ref AttachmentsBucket"
    
    BucketPolicy:
      Type: AWS::S3::BucketPolicy
      Properties: 
        Bucket: !Ref AttachmentsBucket
        PolicyDocument:
          Id: MyPolicy
          Version: '2012-10-17'
          Statement:
            - Sid: PublicReadForGetBucketObjects
              Effect: Allow
              Principal: '*'
              Action: 
                - 's3:AbortMultipartUpload'
                - 's3:ListBucket'
                - 's3:PutObject'
                - 's3:GetObject'
                - 's3:GetObjectVersion'
                - 's3:PutObjectAcl'
              Resource: 
                - 'arn:aws:s3:::${self:provider.environment.ATTACHMENT_S3_BUCKET}/*'
                - 'arn:aws:s3:::${self:provider.environment.ATTACHMENT_S3_BUCKET}'
       